{"version":3,"sources":["CardStack.tsx"],"names":["maybeExpoVersion","global","Expo","Constants","manifest","sdkVersion","split","isInsufficientExpoVersion","Number","EPSILON","FAR_FAR_AWAY","dimensions","Dimensions","get","layout","width","height","MaybeScreenContainer","enabled","style","rest","Platform","OS","overflow","MaybeScreen","active","top","transform","translateY","interpolate","inputRange","outputRange","FALLBACK_DESCRIPTOR","Object","freeze","options","getHeaderHeights","routes","insets","descriptors","previous","reduce","acc","curr","key","StyleSheet","flatten","headerStyle","safeAreaInsets","headerStatusBarHeight","getDistanceFromOptions","mode","descriptor","gestureDirection","ModalTransition","DefaultTransition","getProgressFromGesture","gesture","distance","CardStack","React","Component","scenes","gestures","props","headerHeights","e","nativeEvent","setState","state","route","previousHeight","index","getDerivedStateFromProps","animationEnabled","Animated","Value","openingRouteKeys","includes","map","self","previousRoute","nextRoute","oldScene","currentGesture","previousGesture","undefined","nextGesture","nextDescriptor","previousDescriptor","scene","progress","current","next","__memo","every","it","i","render","closingRouteKeys","onOpenRoute","onCloseRoute","getPreviousRoute","getGesturesEnabled","renderHeader","renderScene","headerMode","onTransitionStart","onTransitionEnd","onPageChangeStart","onPageChangeConfirm","onPageChangeCancel","focusedRoute","focusedDescriptor","focusedOptions","defaultTransitionPreset","headerStyleInterpolator","forNoAnimationHeader","right","bottom","left","isScreensEnabled","styles","container","handleLayout","focused","isScreenActive","length","extrapolate","headerShown","headerTransparent","cardShadowEnabled","cardOverlayEnabled","cardStyle","gestureResponseDistance","gestureVelocityImpact","transitionSpec","cardStyleInterpolator","forNoAnimationCard","transitionConfig","nextScene","safeAreaInsetTop","safeAreaInsetRight","safeAreaInsetBottom","safeAreaInsetLeft","previousScene","j","s","absoluteFill","handleHeaderLayout","getFocusedRoute","onContentHeightChange","styleInterpolator","floating","create","flex","position"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  View,\n  StyleSheet,\n  LayoutChangeEvent,\n  Dimensions,\n  Platform,\n  ViewProps,\n} from 'react-native';\nimport { EdgeInsets } from 'react-native-safe-area-context';\n// eslint-disable-next-line import/no-unresolved\nimport { ScreenContainer, Screen, screensEnabled } from 'react-native-screens'; // Import with * as to prevent getters being called\nimport { Route, StackNavigationState } from '@react-navigation/native';\n\nimport { getDefaultHeaderHeight } from '../Header/HeaderSegment';\nimport { Props as HeaderContainerProps } from '../Header/HeaderContainer';\nimport CardContainer from './CardContainer';\nimport {\n  DefaultTransition,\n  ModalTransition,\n} from '../../TransitionConfigs/TransitionPresets';\nimport { forNoAnimation as forNoAnimationHeader } from '../../TransitionConfigs/HeaderStyleInterpolators';\nimport { forNoAnimation as forNoAnimationCard } from '../../TransitionConfigs/CardStyleInterpolators';\nimport getDistanceForDirection from '../../utils/getDistanceForDirection';\nimport {\n  Layout,\n  StackHeaderMode,\n  StackCardMode,\n  Scene,\n  StackDescriptorMap,\n  StackNavigationOptions,\n  StackDescriptor,\n} from '../../types';\n\ntype GestureValues = {\n  [key: string]: Animated.Value;\n};\n\n// @ts-ignore\nconst maybeExpoVersion = global.Expo?.Constants.manifest.sdkVersion.split(\n  '.'\n)[0];\nconst isInsufficientExpoVersion = maybeExpoVersion\n  ? Number(maybeExpoVersion) <= 36\n  : maybeExpoVersion === 'UNVERSIONED';\n\ntype Props = {\n  mode: StackCardMode;\n  insets: EdgeInsets;\n  state: StackNavigationState;\n  descriptors: StackDescriptorMap;\n  routes: Route<string>[];\n  openingRouteKeys: string[];\n  closingRouteKeys: string[];\n  onOpenRoute: (props: { route: Route<string> }) => void;\n  onCloseRoute: (props: { route: Route<string> }) => void;\n  getPreviousRoute: (props: {\n    route: Route<string>;\n  }) => Route<string> | undefined;\n  getGesturesEnabled: (props: { route: Route<string> }) => boolean;\n  renderHeader: (props: HeaderContainerProps) => React.ReactNode;\n  renderScene: (props: { route: Route<string> }) => React.ReactNode;\n  headerMode: StackHeaderMode;\n  onTransitionStart: (\n    props: { route: Route<string> },\n    closing: boolean\n  ) => void;\n  onTransitionEnd: (props: { route: Route<string> }, closing: boolean) => void;\n  onPageChangeStart?: () => void;\n  onPageChangeConfirm?: () => void;\n  onPageChangeCancel?: () => void;\n};\n\ntype State = {\n  routes: Route<string>[];\n  descriptors: StackDescriptorMap;\n  scenes: Scene<Route<string>>[];\n  gestures: GestureValues;\n  layout: Layout;\n  headerHeights: Record<string, number>;\n};\n\nconst EPSILON = 0.01;\nconst FAR_FAR_AWAY = 9000;\n\nconst dimensions = Dimensions.get('window');\nconst layout = { width: dimensions.width, height: dimensions.height };\n\nconst MaybeScreenContainer = ({\n  enabled,\n  style,\n  ...rest\n}: ViewProps & {\n  enabled: boolean;\n  children: React.ReactNode;\n}) => {\n  if (enabled && screensEnabled()) {\n    return <ScreenContainer style={style} {...rest} />;\n  }\n\n  return (\n    <View\n      collapsable={!enabled}\n      removeClippedSubviews={Platform.OS !== 'ios' && enabled}\n      style={[style, { overflow: 'hidden' }]}\n      {...rest}\n    />\n  );\n};\n\nconst MaybeScreen = ({\n  enabled,\n  active,\n  style,\n  ...rest\n}: ViewProps & {\n  enabled: boolean;\n  active: number | Animated.AnimatedInterpolation;\n  children: React.ReactNode;\n}) => {\n  if (enabled && screensEnabled()) {\n    // @ts-ignore\n    return <Screen active={active} style={style} {...rest} />;\n  }\n\n  return (\n    <Animated.View\n      style={[\n        style,\n        {\n          overflow: 'hidden',\n          // Position the screen offscreen to take advantage of offscreen perf optimization\n          // https://facebook.github.io/react-native/docs/view#removeclippedsubviews\n          // This can be useful if screens is not enabled\n          // It's buggy on iOS, so we don't enable it there\n          top:\n            enabled && typeof active === 'number' && !active ? FAR_FAR_AWAY : 0,\n          transform: [\n            {\n              // If the `active` prop is animated node, we can't use the `left` property due to native driver\n              // So we use `translateY` instead\n              translateY:\n                enabled && typeof active !== 'number'\n                  ? active.interpolate({\n                      inputRange: [0, 1],\n                      outputRange: [FAR_FAR_AWAY, 0],\n                    })\n                  : 0,\n            },\n          ],\n        },\n      ]}\n      {...rest}\n    />\n  );\n};\n\nconst FALLBACK_DESCRIPTOR = Object.freeze({ options: {} });\n\nconst getHeaderHeights = (\n  routes: Route<string>[],\n  insets: EdgeInsets,\n  descriptors: StackDescriptorMap,\n  layout: Layout,\n  previous: Record<string, number>\n) => {\n  return routes.reduce<Record<string, number>>((acc, curr) => {\n    const { options = {} } = descriptors[curr.key] || {};\n    const { height = previous[curr.key] } = StyleSheet.flatten(\n      options.headerStyle || {}\n    );\n\n    const safeAreaInsets = {\n      ...insets,\n      ...options.safeAreaInsets,\n    };\n\n    const { headerStatusBarHeight = safeAreaInsets.top } = options;\n\n    acc[curr.key] =\n      typeof height === 'number'\n        ? height\n        : getDefaultHeaderHeight(layout, headerStatusBarHeight);\n\n    return acc;\n  }, {});\n};\n\nconst getDistanceFromOptions = (\n  mode: StackCardMode,\n  layout: Layout,\n  descriptor?: StackDescriptor\n) => {\n  const {\n    gestureDirection = mode === 'modal'\n      ? ModalTransition.gestureDirection\n      : DefaultTransition.gestureDirection,\n  } = descriptor?.options || {};\n\n  return getDistanceForDirection(layout, gestureDirection);\n};\n\nconst getProgressFromGesture = (\n  mode: StackCardMode,\n  gesture: Animated.Value,\n  layout: Layout,\n  descriptor?: StackDescriptor\n) => {\n  const distance = getDistanceFromOptions(mode, layout, descriptor);\n\n  if (distance > 0) {\n    return gesture.interpolate({\n      inputRange: [0, distance],\n      outputRange: [1, 0],\n    });\n  }\n\n  return gesture.interpolate({\n    inputRange: [distance, 0],\n    outputRange: [0, 1],\n  });\n};\n\nexport default class CardStack extends React.Component<Props, State> {\n  static getDerivedStateFromProps(props: Props, state: State) {\n    if (\n      props.routes === state.routes &&\n      props.descriptors === state.descriptors\n    ) {\n      return null;\n    }\n\n    const gestures = props.routes.reduce<GestureValues>((acc, curr) => {\n      const descriptor = props.descriptors[curr.key];\n      const { animationEnabled } = descriptor?.options || {};\n\n      acc[curr.key] =\n        state.gestures[curr.key] ||\n        new Animated.Value(\n          props.openingRouteKeys.includes(curr.key) &&\n          animationEnabled !== false\n            ? getDistanceFromOptions(props.mode, state.layout, descriptor)\n            : 0\n        );\n\n      return acc;\n    }, {});\n\n    return {\n      routes: props.routes,\n      scenes: props.routes.map((route, index, self) => {\n        const previousRoute = self[index - 1];\n        const nextRoute = self[index + 1];\n\n        const oldScene = state.scenes[index];\n\n        const currentGesture = gestures[route.key];\n        const previousGesture = previousRoute\n          ? gestures[previousRoute.key]\n          : undefined;\n        const nextGesture = nextRoute ? gestures[nextRoute.key] : undefined;\n\n        const descriptor =\n          props.descriptors[route.key] ||\n          state.descriptors[route.key] ||\n          (oldScene ? oldScene.descriptor : FALLBACK_DESCRIPTOR);\n\n        const nextDescriptor =\n          props.descriptors[nextRoute?.key] ||\n          state.descriptors[nextRoute?.key];\n\n        const previousDescriptor =\n          props.descriptors[previousRoute?.key] ||\n          state.descriptors[previousRoute?.key];\n\n        const scene = {\n          route,\n          descriptor,\n          progress: {\n            current: getProgressFromGesture(\n              props.mode,\n              currentGesture,\n              state.layout,\n              descriptor\n            ),\n            next: nextGesture\n              ? getProgressFromGesture(\n                  props.mode,\n                  nextGesture,\n                  state.layout,\n                  nextDescriptor\n                )\n              : undefined,\n            previous: previousGesture\n              ? getProgressFromGesture(\n                  props.mode,\n                  previousGesture,\n                  state.layout,\n                  previousDescriptor\n                )\n              : undefined,\n          },\n          __memo: [\n            route,\n            state.layout,\n            descriptor,\n            nextDescriptor,\n            previousDescriptor,\n            currentGesture,\n            nextGesture,\n            previousGesture,\n          ],\n        };\n\n        if (\n          oldScene &&\n          scene.__memo.every((it, i) => {\n            // @ts-ignore\n            return oldScene.__memo[i] === it;\n          })\n        ) {\n          return oldScene;\n        }\n\n        return scene;\n      }),\n      gestures,\n      descriptors: props.descriptors,\n      headerHeights: getHeaderHeights(\n        props.routes,\n        props.insets,\n        state.descriptors,\n        state.layout,\n        state.headerHeights\n      ),\n    };\n  }\n\n  state: State = {\n    routes: [],\n    scenes: [],\n    gestures: {},\n    layout,\n    descriptors: this.props.descriptors,\n    // Used when card's header is null and mode is float to make transition\n    // between screens with headers and those without headers smooth.\n    // This is not a great heuristic here. We don't know synchronously\n    // on mount what the header height is so we have just used the most\n    // common cases here.\n    headerHeights: {},\n  };\n\n  private handleLayout = (e: LayoutChangeEvent) => {\n    const { height, width } = e.nativeEvent.layout;\n\n    const layout = { width, height };\n\n    this.setState((state, props) => {\n      if (height === state.layout.height && width === state.layout.width) {\n        return null;\n      }\n\n      return {\n        layout,\n        headerHeights: getHeaderHeights(\n          props.routes,\n          props.insets,\n          state.descriptors,\n          layout,\n          {}\n        ),\n      };\n    });\n  };\n\n  private handleHeaderLayout = ({\n    route,\n    height,\n  }: {\n    route: Route<string>;\n    height: number;\n  }) => {\n    this.setState(({ headerHeights }) => {\n      const previousHeight = headerHeights[route.key];\n\n      if (previousHeight === height) {\n        return null;\n      }\n\n      return {\n        headerHeights: {\n          ...headerHeights,\n          [route.key]: height,\n        },\n      };\n    });\n  };\n\n  private getFocusedRoute = () => {\n    const { state } = this.props;\n\n    return state.routes[state.index];\n  };\n\n  render() {\n    const {\n      mode,\n      insets,\n      descriptors,\n      state,\n      routes,\n      closingRouteKeys,\n      onOpenRoute,\n      onCloseRoute,\n      getPreviousRoute,\n      getGesturesEnabled,\n      renderHeader,\n      renderScene,\n      headerMode,\n      onTransitionStart,\n      onTransitionEnd,\n      onPageChangeStart,\n      onPageChangeConfirm,\n      onPageChangeCancel,\n    } = this.props;\n\n    const { scenes, layout, gestures, headerHeights } = this.state;\n\n    const focusedRoute = state.routes[state.index];\n    const focusedDescriptor = descriptors[focusedRoute.key];\n    const focusedOptions = focusedDescriptor ? focusedDescriptor.options : {};\n\n    let defaultTransitionPreset =\n      mode === 'modal' ? ModalTransition : DefaultTransition;\n\n    if (headerMode === 'screen') {\n      defaultTransitionPreset = {\n        ...defaultTransitionPreset,\n        headerStyleInterpolator: forNoAnimationHeader,\n      };\n    }\n\n    const {\n      top = insets.top,\n      right = insets.right,\n      bottom = insets.bottom,\n      left = insets.left,\n    } = focusedOptions.safeAreaInsets || {};\n\n    // Screens is buggy on iOS, so we don't enable it there\n    // For modals, usually we want the screen underneath to be visible, so also disable it there\n    const isScreensEnabled =\n      Platform.OS !== 'ios' &&\n      (isInsufficientExpoVersion ? mode !== 'modal' : true);\n\n    return (\n      <React.Fragment>\n        <MaybeScreenContainer\n          enabled={isScreensEnabled}\n          style={styles.container}\n          onLayout={this.handleLayout}\n        >\n          {routes.map((route, index, self) => {\n            const focused = focusedRoute.key === route.key;\n            const gesture = gestures[route.key];\n            const scene = scenes[index];\n\n            // Display current screen and a screen beneath.\n            let isScreenActive: Animated.AnimatedInterpolation | 0 | 1 =\n              index >= self.length - 2 ? 1 : 0;\n\n            if (isInsufficientExpoVersion) {\n              isScreenActive =\n                index === self.length - 1\n                  ? 1\n                  : Platform.OS === 'android'\n                  ? scene.progress.next\n                    ? scene.progress.next.interpolate({\n                        inputRange: [0, 1 - EPSILON, 1],\n                        outputRange: [1, 1, 0],\n                        extrapolate: 'clamp',\n                      })\n                    : 1\n                  : index === self.length - 2\n                  ? 1\n                  : 0;\n            }\n\n            const {\n              safeAreaInsets,\n              headerShown,\n              headerTransparent,\n              cardShadowEnabled,\n              cardOverlayEnabled,\n              cardStyle,\n              animationEnabled,\n              gestureResponseDistance,\n              gestureVelocityImpact,\n              gestureDirection = defaultTransitionPreset.gestureDirection,\n              transitionSpec = defaultTransitionPreset.transitionSpec,\n              cardStyleInterpolator = animationEnabled === false\n                ? forNoAnimationCard\n                : defaultTransitionPreset.cardStyleInterpolator,\n              headerStyleInterpolator = defaultTransitionPreset.headerStyleInterpolator,\n            } = scene.descriptor\n              ? scene.descriptor.options\n              : ({} as StackNavigationOptions);\n\n            let transitionConfig = {\n              gestureDirection,\n              transitionSpec,\n              cardStyleInterpolator,\n              headerStyleInterpolator,\n            };\n\n            // When a screen is not the last, it should use next screen's transition config\n            // Many transitions also animate the previous screen, so using 2 different transitions doesn't look right\n            // For example combining a slide and a modal transition would look wrong otherwise\n            // With this approach, combining different transition styles in the same navigator mostly looks right\n            // This will still be broken when 2 transitions have different idle state (e.g. modal presentation),\n            // but majority of the transitions look alright\n            if (index !== self.length - 1) {\n              const nextScene = scenes[index + 1];\n\n              if (nextScene) {\n                const {\n                  animationEnabled,\n                  gestureDirection = defaultTransitionPreset.gestureDirection,\n                  transitionSpec = defaultTransitionPreset.transitionSpec,\n                  cardStyleInterpolator = animationEnabled === false\n                    ? forNoAnimationCard\n                    : defaultTransitionPreset.cardStyleInterpolator,\n                  headerStyleInterpolator = defaultTransitionPreset.headerStyleInterpolator,\n                } = nextScene.descriptor\n                  ? nextScene.descriptor.options\n                  : ({} as StackNavigationOptions);\n\n                transitionConfig = {\n                  gestureDirection,\n                  transitionSpec,\n                  cardStyleInterpolator,\n                  headerStyleInterpolator,\n                };\n              }\n            }\n\n            const {\n              top: safeAreaInsetTop = insets.top,\n              right: safeAreaInsetRight = insets.right,\n              bottom: safeAreaInsetBottom = insets.bottom,\n              left: safeAreaInsetLeft = insets.left,\n            } = safeAreaInsets || {};\n\n            const previousRoute = getPreviousRoute({ route: scene.route });\n\n            let previousScene = scenes[index - 1];\n\n            if (previousRoute) {\n              // The previous scene will be shortly before the current scene in the array\n              // So loop back from current index to avoid looping over the full array\n              for (let j = index - 1; j >= 0; j--) {\n                const s = scenes[j];\n\n                if (s && s.route.key === previousRoute.key) {\n                  previousScene = s;\n                  break;\n                }\n              }\n            }\n\n            return (\n              <MaybeScreen\n                key={route.key}\n                style={StyleSheet.absoluteFill}\n                enabled={isScreensEnabled}\n                active={isScreenActive}\n                pointerEvents=\"box-none\"\n              >\n                <CardContainer\n                  index={index}\n                  active={index === self.length - 1}\n                  focused={focused}\n                  closing={closingRouteKeys.includes(route.key)}\n                  layout={layout}\n                  gesture={gesture}\n                  scene={scene}\n                  previousScene={previousScene}\n                  safeAreaInsetTop={safeAreaInsetTop}\n                  safeAreaInsetRight={safeAreaInsetRight}\n                  safeAreaInsetBottom={safeAreaInsetBottom}\n                  safeAreaInsetLeft={safeAreaInsetLeft}\n                  cardOverlayEnabled={cardOverlayEnabled}\n                  cardShadowEnabled={cardShadowEnabled}\n                  cardStyle={cardStyle}\n                  onPageChangeStart={onPageChangeStart}\n                  onPageChangeConfirm={onPageChangeConfirm}\n                  onPageChangeCancel={onPageChangeCancel}\n                  gestureResponseDistance={gestureResponseDistance}\n                  headerHeight={headerHeights[route.key]}\n                  onHeaderHeightChange={this.handleHeaderLayout}\n                  getPreviousRoute={getPreviousRoute}\n                  getFocusedRoute={this.getFocusedRoute}\n                  headerMode={headerMode}\n                  headerShown={headerShown}\n                  headerTransparent={headerTransparent}\n                  renderHeader={renderHeader}\n                  renderScene={renderScene}\n                  onOpenRoute={onOpenRoute}\n                  onCloseRoute={onCloseRoute}\n                  onTransitionStart={onTransitionStart}\n                  onTransitionEnd={onTransitionEnd}\n                  gestureEnabled={index !== 0 && getGesturesEnabled({ route })}\n                  gestureVelocityImpact={gestureVelocityImpact}\n                  {...transitionConfig}\n                />\n              </MaybeScreen>\n            );\n          })}\n        </MaybeScreenContainer>\n        {headerMode === 'float'\n          ? renderHeader({\n              mode: 'float',\n              layout,\n              insets: { top, right, bottom, left },\n              scenes,\n              getPreviousRoute,\n              getFocusedRoute: this.getFocusedRoute,\n              onContentHeightChange: this.handleHeaderLayout,\n              gestureDirection:\n                focusedOptions.gestureDirection !== undefined\n                  ? focusedOptions.gestureDirection\n                  : defaultTransitionPreset.gestureDirection,\n              styleInterpolator:\n                focusedOptions.headerStyleInterpolator !== undefined\n                  ? focusedOptions.headerStyleInterpolator\n                  : defaultTransitionPreset.headerStyleInterpolator,\n              style: styles.floating,\n            })\n          : null}\n      </React.Fragment>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n  floating: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n  },\n});\n"]}